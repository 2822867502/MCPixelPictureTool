package org.zlk.mcpixelpicturetool;

import org.zlk.mcpixelpicturetool.type.color.SRGB;
import org.zlk.mcpixelpicturetool.type.property.KeyValueI18NProperty;
import org.zlk.mcpixelpicturetool.utils.ImageUtils;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class Main {
    public static final String UNKNOWN_CATEGORY_KEY = "unknown";
    public static final String UNKNOWN_CATEGORY_I18N = "无类别";
    private static final String BLOCK_PREFIX = "supported.";
    private static final String BLOCK_SUFFIX = ".blocks";
    private static final String CATEGORY_KEY = "supported.categories";
    private static final String OTHER_CATEGORY_KEY = "supported.categories.other";
    private static final String DEFAULT_PREFIX = "minecraft:";
    private static final String OTHER_CATEGORY_VALUE = "other=null&其他";
    private static final String DEFAULT_COMMENTS = "Generated by MCPictureToSRGB";
    private static final ArrayList<File> files = new ArrayList<>();
    private static final ArrayList<File> directories = new ArrayList<>();
    private static File outputFile;

    public static void main(String[] args) {
        try {
            String d = args[0];
            String o = args[1];
            File df = new File(d);
            for (File s : Objects.requireNonNull(df.listFiles())) {
                if (s.isFile()) files.add(s);
                if (s.isDirectory()) directories.add(s);
            }
            outputFile = new File(o);
        } catch (Exception e) {
            System.out.println("Error: Unsupported command");
            System.out.println("Usage: [directory] [output]");
            return;
        }
        ArrayList<String> toOutCategories = new ArrayList<>();
        HashMap<String, String> toOutBlock = new HashMap<>();
        for (File directory : directories) {
            if (directory.isFile()) {
                System.out.println("Warn: Skip! Not a directory : " + directory);
                continue;
            }
            String[] directoryNames = directory.getName().split("\\.");
            String name;
            String i18N;
            try {
                name = directoryNames[0];
                i18N = directoryNames[1];
            } catch (ArrayIndexOutOfBoundsException e) {
                name = directory.getName();
                i18N = directory.getName();
                System.out.println("Warn: Please use \"[name].[i18N]\" to rename directory");
            }
            KeyValueI18NProperty category = new KeyValueI18NProperty(name, BLOCK_PREFIX + name + BLOCK_SUFFIX, i18N);
            File[] files = directory.listFiles();
            if (files == null || files.length == 0) {
                System.out.println("Warn: Skip! Cannot read file in directory :" + directory);
                continue;
            }
            System.out.println("Info: Start deal Category : " + category.value + "." + category.i18N);
            KeyValueI18NProperty[] categoryContent = forFiles(files);
            System.out.println("Info: End deal Category : " + category.value + "." + category.i18N);
            String categoryStr = Arrays.toString(categoryContent);
            toOutBlock.put(category.value, categoryStr);
            toOutCategories.add(category.toString());
        }
        KeyValueI18NProperty unknownCategory = new KeyValueI18NProperty(UNKNOWN_CATEGORY_KEY, BLOCK_PREFIX + UNKNOWN_CATEGORY_KEY + BLOCK_SUFFIX, UNKNOWN_CATEGORY_I18N);
        KeyValueI18NProperty[] unknownCategoryContent = forFiles(files.toArray(new File[0]));
        String categoryStr = Arrays.toString(unknownCategoryContent);
        toOutBlock.put(unknownCategory.value, categoryStr);
        toOutCategories.add(unknownCategory.toString());

        Properties properties = new Properties();
        properties.put(CATEGORY_KEY, toOutCategories.toString());
        properties.put(OTHER_CATEGORY_KEY, OTHER_CATEGORY_VALUE);
        for (String key : toOutBlock.keySet()) {
            properties.put(key, toOutBlock.get(key));
        }
        try {
            properties.store(new FileWriter(outputFile), DEFAULT_COMMENTS);
        } catch (IOException e) {
            System.out.println("Error: Cannot write to file : " + outputFile);
        }
    }

    private static KeyValueI18NProperty[] forFiles(File[] files) {
        ArrayList<KeyValueI18NProperty> result = new ArrayList<>();
        for (File file : files) {
            if (file.isDirectory()) {
                System.out.println("Warn: Skip! Not a file : " + file);
                continue;
            }
            String[] filenames = file.getName().replace("^", ":").split("\\.");
            String name;
            String i18N;
            try {
                name = filenames[0];
                i18N = filenames[1];
            } catch (ArrayIndexOutOfBoundsException e) {
                name = file.getName();
                i18N = file.getName();
                System.out.println("Warn: Please use \"[name].[i18N].[suffix]\" to rename file (Use \"^\" to replace \":\") : " + file);
            }
            if (!name.contains(":")) name = DEFAULT_PREFIX + name;
            try {
                System.out.println("Info: deal file : " + file);
                BufferedImage image = ImageUtils.fromFile(file);
                SRGB srgb = ImageUtils.getMostOccurColor(image);
                KeyValueI18NProperty block = new KeyValueI18NProperty(name, srgb.toHex(), i18N);
                result.add(block);
                System.out.println("Info: Result : " + block);
            } catch (IOException e) {
                System.out.println("Error: Skip! Cannot read image file : " + file);
            } catch (NullPointerException e) {
                System.out.println("Error: Skip! Null image : " + file);
            }
        }
        return result.toArray(new KeyValueI18NProperty[0]);
    }
}