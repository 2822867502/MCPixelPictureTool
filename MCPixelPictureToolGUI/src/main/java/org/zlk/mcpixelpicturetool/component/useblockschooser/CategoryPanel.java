package org.zlk.mcpixelpicturetool.component.useblockschooser;

import org.zlk.mcpixelpicturetool.type.Block;
import org.zlk.mcpixelpicturetool.type.property.KeyValueI18NProperty;
import org.zlk.mcpixelpicturetool.utils.I18NUtils;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.ResourceBundle;

public class CategoryPanel extends JPanel {


    private final TablePanel<BlockCheckBox> tablePanel;
    private JPanel mainPanel;
    private int count;
    private int columnCount;
    private int rowCount;
    private JButton no;
    private JButton all;
    private JPanel tablePanelContainer;

    public CategoryPanel() {
        super();
        add(mainPanel);

        columnCount = Integer.parseInt(I18NUtils.getGUIString("gui.default.useblockschooser.columns"));
        tablePanel = new TablePanel<>(0, columnCount);
        tablePanelContainer.add(tablePanel);

        all.addActionListener(e -> onAll());
        no.addActionListener(e -> onNo());
    }

    private void onAll() {
        for (BlockCheckBox checkBox : tablePanel) {
            checkBox.setSelected(true);
        }
    }

    private void onNo() {
        for (BlockCheckBox checkBox : tablePanel) {
            checkBox.setSelected(false);
        }
    }

    public void addBlock(KeyValueI18NProperty block, HashSet<Block> selectedBlocks) {
        count++;
        BlockCheckBox checkBox = new BlockCheckBox();
        checkBox.setBlock(block);
        checkBox.setSelectedBlocks(selectedBlocks);
        checkBox.refreshSelect();
        tablePanel.add(checkBox);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        no = new JButton();
        this.$$$loadButtonText$$$(no, this.$$$getMessageFromBundle$$$("res", "gui.useblockschooser.categorypanel.no.button"));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(no, gbc);
        all = new JButton();
        this.$$$loadButtonText$$$(all, this.$$$getMessageFromBundle$$$("res", "gui.useblockschooser.categorypanel.all.button"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        mainPanel.add(all, gbc);
        tablePanelContainer = new JPanel();
        tablePanelContainer.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(tablePanelContainer, gbc);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    /**
     * @noinspection ALL
     */

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
